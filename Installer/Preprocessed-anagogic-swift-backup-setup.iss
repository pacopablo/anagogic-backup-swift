; BEGIN ISPPBUILTINS.ISS


; END ISPPBUILTINS.ISS

; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{8462B5E5-9169-42C2-BEB7-74CF3A93E95F}
AppName=Anagogic Backup - Swift
AppVersion=0.10
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher=Anagogic
AppPublisherURL=https://github.com/pacopablo/anagogic-backup-swift
AppSupportURL=https://github.com/pacopablo/anagogic-backup-swift
AppUpdatesURL=https://github.com/pacopablo/anagogic-backup-swift
CreateAppDir=yes
DefaultDirName={pf}\Anagogic\Backup
LicenseFile=C:\Development\anagogic-backup-swift\COPYING.rst
OutputBaseFilename=anagogic-swift-backup-setup
Compression=lzma
SolidCompression=yes
;SignTool=Standard /d $qAnagogic Backup Installer$q $f

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "C:\Development\anagogic-backup-swift\dist\_ctypes.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\_hashlib.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\_socket.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\_ssl.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\_win32sysloader.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\backup.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\bz2.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\library.zip"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\perfmon.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\pyexpat.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\python27.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\pywintypes27.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\select.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\servicemanager.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\unicodedata.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\w9xpopen.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\watchdir.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\win32api.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\win32event.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\win32evtlog.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\win32file.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\win32pipe.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\win32service.pyd"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\dist\win32wnet.pyd"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: "C:\Development\anagogic-backup-swift\files\htdocs\humans.txt"; DestDir: "{app}\htdocs"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\404.html"; DestDir: "{app}\htdocs"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\apple-touch-icon.png"; DestDir: "{app}\htdocs"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\apple-touch-icon-57x57-precomposed.png"; DestDir: "{app}\htdocs"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\apple-touch-icon-72x72-precomposed.png"; DestDir: "{app}\htdocs"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\apple-touch-icon-114x114-precomposed.png"; DestDir: "{app}\htdocs"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\apple-touch-icon-144x144-precomposed.png"; DestDir: "{app}\htdocs"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\apple-touch-icon-precomposed.png"; DestDir: "{app}\htdocs"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\favicon.ico"; DestDir: "{app}\htdocs"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\css\bootstrap.css"; DestDir: "{app}\htdocs\css"
Source: "C:\Development\anagogic-backup-swift\files\htdocs\css\main.css"; DestDir: "{app}\htdocs\css"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\css\bootstrap.min.css"; DestDir: "{app}\htdocs\css"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\css\bootstrap-responsive.css"; DestDir: "{app}\htdocs\css"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\css\bootstrap-responsive.min.css"; DestDir: "{app}\htdocs\css"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\img\glyphicons-halflings.png"; DestDir: "{app}\htdocs\img"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\img\glyphicons-halflings-white.png"; DestDir: "{app}\htdocs\img"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\js\main.js"; DestDir: "{app}\htdocs\js"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\js\vendor\modernizr-2.6.1-respond-1.1.0.min.js"; DestDir: "{app}\htdocs\js\vendor"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\js\vendor\bootstrap.js"; DestDir: "{app}\htdocs\js\vendor"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\js\vendor\bootstrap.min.js"; DestDir: "{app}\htdocs\js\vendor"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\htdocs\js\vendor\jquery-1.8.0.min.js"; DestDir: "{app}\htdocs\js\vendor"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\templates\index.tpl"; DestDir: "{app}\templates"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\templates\watched_dirs.tpl"; DestDir: "{app}\templates"; Flags: ignoreversion
Source: "C:\Development\anagogic-backup-swift\files\templates\server_settings.tpl"; DestDir: "{app}\templates"; Flags: ignoreversion


[Run]
Filename: "{app}\backup.exe"; Parameters: "install"

[UninstallRun]
Filename: "{app}\backup.exe"; Parameters: "remove"
  

[Registry]
Root: "HKLM32"; Subkey: "Software\Anagogic"; Flags: uninsdeletekeyifempty
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup\Directories"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup\Swift"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup"; ValueType: dword; ValueName: "port"; ValueData: "4242"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup"; ValueType: string; ValueName: "host"; ValueData: "127.0.0.1"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup"; ValueType: string; ValueName: "appdir"; ValueData: "{app}"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup"; ValueType: string; ValueName: "htdocs"; ValueData: "{app}\htdocs"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup"; ValueType: string; ValueName: "templates"; ValueData: "{app}\templates"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup"; ValueType: dword; ValueName: "restartneeded"; ValueData: "0"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup\Swift"; ValueType: string; ValueName: "auth_url"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup\Swift"; ValueType: string; ValueName: "account"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup\Swift"; ValueType: string; ValueName: "key"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup\Swift"; ValueType: string; ValueName: "password"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup\Swift"; ValueType: string; ValueName: "container"; ValueData: "Anagogic Backup"; Flags: uninsdeletekey
Root: "HKLM32"; Subkey: "Software\Anagogic\Backup"; ValueType: string; ValueName: "namedpipe"; ValueData: "\\.\pipe\AnagogicBackupSwiftPipe"; Flags: uninsdeletekey
Root: "HKCR32"; Subkey: "Folder\shell\Watch"; Flags: uninsdeletekey
Root: "HKCR32"; Subkey: "Folder\shell\Watch\command"; ValueType: string; ValueData: "{app}\watchdir.exe ""%L"""; Flags: uninsdeletekey


[Files]
Source: "scripts\isxdl\isxdl.dll"; Flags: dontcopy

[Code]
procedure isxdl_AddFile(URL, Filename: PAnsiChar);
external 'isxdl_AddFile@files:isxdl.dll stdcall';

function isxdl_DownloadFiles(hWnd: Integer): Integer;
external 'isxdl_DownloadFiles@files:isxdl.dll stdcall';

function isxdl_SetOption(Option, Value: PAnsiChar): Integer;
external 'isxdl_SetOption@files:isxdl.dll stdcall';

[CustomMessages]
DependenciesDir=MyProgramDependencies

depdownload_msg=The following applications are required before setup can continue:%n%n%1%nDownload and install now?
depdownload_admin=An Administrator account is required installing these dependencies.%nPlease run this setup again using 'Run as Administrator' or install the following dependencies manually:%n%n%1%nClose this message and press Cancel to exit setup.
previousinstall_admin=This setup was previously run as Administrator. A non-administrator is not allowed to update in the selected location.%n%nPlease run this setup again using 'Run as Administrator'.%nClose this message and press Cancel to exit setup.
depdownload_memo_title=Download dependencies
depinstall_memo_title=Install dependencies
depinstall_title=Installing dependencies
depinstall_description=Please wait while Setup installs dependencies on your computer.
depinstall_status=Installing %1...
depinstall_missing=%1 must be installed before setup can continue. Please install %1 and run Setup again.
depinstall_error=An error occured while installing the dependencies. Please restart the computer and run the setup again or install the following dependencies manually:%n
isxdl_langfile=


[Files]
Source: "scripts\isxdl\german2.ini"; Flags: dontcopy

[Code]
type
	TProduct = record
		File: String;
		Title: String;
		Parameters: String;
		InstallClean : Boolean;
		MustRebootAfter : Boolean;
        RequestRestart : Boolean;
	end;
	
var
	installMemo, downloadMemo, downloadMessage: string;
	products: array of TProduct;
	DependencyPage: TOutputProgressWizardPage;

	rebootRequired : boolean;
	rebootMessage : string;
  
procedure AddProduct(FileName, Parameters, Title, Size, URL: string; InstallClean : Boolean; MustRebootAfter : Boolean);
var
	path: string;
	i: Integer;
begin
	installMemo := installMemo + '%1' + Title + #13;
	
	path := ExpandConstant('{src}{\}') + CustomMessage('DependenciesDir') + '\' + FileName;
	if not FileExists(path) then begin
		path := ExpandConstant('{tmp}{\}') + FileName;
		
		isxdl_AddFile(URL, path);
		
		downloadMemo := downloadMemo + '%1' + Title + #13;
		downloadMessage := downloadMessage + '    ' + Title + ' (' + Size + ')' + #13;
	end;
	
	i := GetArrayLength(products);
	SetArrayLength(products, i + 1);
	products[i].File := path;
	products[i].Title := Title;
	products[i].Parameters := Parameters;
	products[i].InstallClean := InstallClean;
	products[i].MustRebootAfter := MustRebootAfter;
	products[i].RequestRestart := false;
end;

function GetProductcount: integer;
begin
    Result := GetArrayLength(products);
end;

function SmartExec(prod : TProduct; var ResultCode : Integer) : Boolean;
begin
    if (UpperCase(Copy(prod.File,Length(prod.File)-2,3)) <> 'EXE') then begin
        Result := ShellExec('', prod.File, prod.Parameters, '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
    end else begin
        Result := Exec(prod.File, prod.Parameters, '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
    end;
    if (ResultCode = 3010) then begin
        prod.RequestRestart := true;
        ResultCode := 0;
    end;
end;

function PendingReboot : Boolean;
var	Names: String;
begin
  if (RegQueryMultiStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager', 'PendingFileRenameOperations', Names)) then begin
      Result := true;
  end else if ((RegQueryMultiStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager', 'SetupExecute', Names)) and (Names <> ''))  then begin
		Result := true;
	end
	else begin
	  Result := false;
  end;		
end;

function InstallProducts: Boolean;
var
	ResultCode, i, productCount, finishCount: Integer;
begin
	Result := true;
	productCount := GetArrayLength(products);
		
	if productCount > 0 then begin
		DependencyPage := CreateOutputProgressPage(CustomMessage('depinstall_title'), CustomMessage('depinstall_description'));
		DependencyPage.Show;
		
		for i := 0 to productCount - 1 do begin
		    if ((products[i].InstallClean) and PendingReboot)  then begin
		        rebootRequired := true;
		        rebootmessage := products[i].Title;
		        exit;
		    end;
		  
		    DependencyPage.SetText(FmtMessage(CustomMessage('depinstall_status'), [products[i].Title]), '');
		    DependencyPage.SetProgress(i, productCount);
			
            if SmartExec(products[i], ResultCode) then begin
				if ResultCode = 0 then
					finishCount := finishCount + 1;
				if (products[i].MustRebootAfter = true) then begin
				    rebootRequired := true;
				    rebootmessage := products[i].Title;
				    if not PendingReboot then begin
  				        RegWriteMultiStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager', 'PendingFileRenameOperations', '');
                    end;
                    exit;
                end;
            end
			else begin
			    Result := false;
				break;
			end;
	    end;
		
		for i := 0 to productCount - finishCount - 1 do begin
			products[i] := products[i+finishCount];
		end;
		SetArrayLength(products, productCount - finishCount);
		
		DependencyPage.Hide;
	end;
end;


function PrepareToInstall(var NeedsRestart: Boolean): String;
var
	i: Integer;
	s: string;
begin
	if not InstallProducts() then begin
		s := CustomMessage('depinstall_error');
		
		for i := 0 to GetArrayLength(products) - 1 do begin
			s := s + #13 + '    ' + products[i].Title;
		end;
		
		Result := s;
	end
  else if (rebootrequired) then
	begin
	   Result := RebootMessage;
	   NeedsRestart := true;
	    RegWriteStringValue(HKEY_CURRENT_USER, 'SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce',
                           'InstallBootstrap', ExpandConstant('{srcexe}'));
	end;
end;


function NeedRestart : Boolean;
var i: integer;
begin
    result := false;
	for i := 0 to GetArrayLength(products) - 1 do
        result := result or products[i].RequestRestart;
end;

function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo, MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;
var
	s: string;
begin
	if downloadMemo <> '' then
		s := s + CustomMessage('depdownload_memo_title') + ':' + NewLine + FmtMessage(downloadMemo, [Space]) + NewLine;
	if installMemo <> '' then
		s := s + CustomMessage('depinstall_memo_title') + ':' + NewLine + FmtMessage(installMemo, [Space]) + NewLine;

	s := s + MemoDirInfo + NewLine + NewLine + MemoGroupInfo
	
	if MemoTasksInfo <> '' then
		s := s + NewLine + NewLine + MemoTasksInfo;

	Result := s
end;


function NextButtonClick(CurPageID: Integer): Boolean;
var pf: string;
begin
	Result := true;

    if (CurPageID = wpWelcome) and (not IsAdminLoggedOn()) and Result then begin
   
        if (Wizardform.PrevAppDir <> '') then begin
            pf := ExpandConstant('{pf}');
            if Copy(Wizardform.PrevAppDir,1,Length(pf)) = pf then begin
                SuppressibleMsgBox(CustomMessage('previousinstall_admin'), mbConfirmation, MB_OK, IDOK);
                Result := false;
            end;
        end;
    end;
    if (CurPageID = wpWelcome) and (GetArrayLength(products) > 0) and (not IsAdminLoggedOn()) and Result then begin
        SuppressibleMsgBox(FmtMessage(CustomMessage('depdownload_admin'), [downloadMessage]), mbConfirmation, MB_OK, IDOK);
        Result := false;
    end;
	if CurPageID = wpReady then begin

		if downloadMemo <> '' then begin
			if ActiveLanguage() <> 'english' then begin
				ExtractTemporaryFile(CustomMessage('isxdl_langfile'));
				isxdl_SetOption('language', ExpandConstant('{tmp}{\}') + CustomMessage('isxdl_langfile'));
			end;
			
			if SuppressibleMsgBox(FmtMessage(CustomMessage('depdownload_msg'), [downloadMessage]), mbConfirmation, MB_YESNO, IDYES) = IDNO then
				Result := false
			else if isxdl_DownloadFiles(StrToInt(ExpandConstant('{wizardhwnd}'))) = 0 then
				Result := false;
		end;
	end;
end;

function IsX64: Boolean;
begin
	Result := Is64BitInstallMode and (ProcessorArchitecture = paX64);
end;

function IsIA64: Boolean;
begin
	Result := Is64BitInstallMode and (ProcessorArchitecture = paIA64);
end;

function GetURL(x86, x64, ia64: String): String;
begin
	if IsX64() and (x64 <> '') then
		Result := x64;
	if IsIA64() and (ia64 <> '') then
		Result := ia64;
	
	if Result = '' then
		Result := x86;
end;

[Code]
var
	WindowsVersion: TWindowsVersion;
	
procedure initwinversion();
begin
	GetWindowsVersionEx(WindowsVersion);
end;

function exactwinversion(MajorVersion, MinorVersion: integer): boolean;
begin
	Result := (WindowsVersion.Major = MajorVersion) and (WindowsVersion.Minor = MinorVersion);
end;

function minwinversion(MajorVersion, MinorVersion: integer): boolean;
begin
	Result := (WindowsVersion.Major > MajorVersion) or ((WindowsVersion.Major = MajorVersion) and (WindowsVersion.Minor >= MinorVersion));
end;

function maxwinversion(MajorVersion, MinorVersion: integer): boolean;
begin
	Result := (WindowsVersion.Major < MajorVersion) or ((WindowsVersion.Major = MajorVersion) and (WindowsVersion.Minor <= MinorVersion));
end;

function exactwinspversion(MajorVersion, MinorVersion, SpVersion: integer): boolean;
begin
	if exactwinversion(MajorVersion, MinorVersion) then
		Result := WindowsVersion.ServicePackMajor = SpVersion
	else
		Result := true;
end;

function minwinspversion(MajorVersion, MinorVersion, SpVersion: integer): boolean;
begin
	if exactwinversion(MajorVersion, MinorVersion) then
		Result := WindowsVersion.ServicePackMajor >= SpVersion
	else
		Result := true;
end;

function maxwinspversion(MajorVersion, MinorVersion, SpVersion: integer): boolean;
begin
	if exactwinversion(MajorVersion, MinorVersion) then
		Result := WindowsVersion.ServicePackMajor <= SpVersion
	else
		Result := true;
end;
[Code]
function GetFullVersion(VersionMS, VersionLS: cardinal): string;
var
	version: string;
begin
	version := IntToStr(word(VersionMS shr 16));
	version := version + '.' + IntToStr(word(VersionMS and not $ffff0000));
	
	version := version + '.' + IntToStr(word(VersionLS shr 16));
	version := version + '.' + IntToStr(word(VersionLS and not $ffff0000));
	
	Result := version;
end;

function fileversion(file: string): string;
var
	versionMS, versionLS: cardinal;
begin
	if GetVersionNumbers(file, versionMS, versionLS) then
		Result := GetFullVersion(versionMS, versionLS)
	else
		Result := '0';
end;


[CustomMessages]
vc2008x86_title=Microsoft Visual C++ 2008 Service Pack 1 Redistributable Package MFC Security Update (x86)

vc2008x86_size=4.3 MB
vc2008_lcid=''


[Code]
const
    vc2008x86_url = 'http://download.microsoft.com/download/5/D/8/5D8C65CB-C849-4025-8E95-C3966CAFD8AE/vcredist_x86.exe';

procedure vc2008();
var
	version: cardinal;
begin
    if not RegKeyExists(HKLM,'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{9BE518E6-ECC6-35A9-88E4-87755C07200F}') then
    		AddProduct('vcredist_x86.exe',
    			CustomMessage('vc2008_lcid') + '/q ' + '' + '/norestart',
    			CustomMessage('vc2008x86_title'),
    			CustomMessage('vc2008x86_size'),
    			vc2008x86_url,false,false);
end;

[CustomMessages]
win2000sp3_title=Windows 2000 Service Pack 3
winxpsp2_title=Windows XP Service Pack 2
winxpsp3_title=Windows XP Service Pack 3

[Dirs]
Name: "{app}\htdocs"
Name: "{app}\htdocs\css"
Name: "{app}\htdocs\img"
Name: "{app}\htdocs\js"
Name: "{app}\htdocs\js\vendor"
Name: "{app}\templates"

[Code]
function IsWin32(): Boolean;
begin
  Result := not IsWin64;
end;

function InitializeSetup(): Boolean;
begin
	initwinversion();
	
	if not minwinspversion(5, 1, 3) then begin
		MsgBox(FmtMessage(CustomMessage('depinstall_missing'), [CustomMessage('winxpsp3_title')]), mbError, MB_OK);
		exit;
	end;
	
	vc2008();
	
	Result := true;
end;


